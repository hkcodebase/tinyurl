AWSTemplateFormatVersion: '2010-09-09'
Resources:
  # IAM Role for Lambda Execution with Access to Url Table
  TinyurlLambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: TinyurlLambdaExecutionRole
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: DynamoDBAccessPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - dynamodb:PutItem
                  - dynamodb:GetItem
                  - dynamodb:DeleteItem
                  - dynamodb:Query
                  - dynamodb:Scan
                  - dynamodb:UpdateItem
                Resource: !Sub "arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/Url"
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole

  # Lambda Function
  TinyurlLambdaFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: TinyurlLambdaFunction
      Runtime: java21
      Role: !GetAtt TinyurlLambdaExecutionRole.Arn
      Handler: hk.prj.TinyurlHandler::handleRequest
      Code:
        S3Bucket: !ImportValue TinyurlLambdaCodeBucketName
        S3Key: "tinyurl.jar"
      Timeout: 30
      MemorySize: 512
      Description: "Tinyurl Lambda function with Java21 runtime and restricted DynamoDB access"

  # API Gateway REST API
  ApiGateway:
    Type: AWS::ApiGateway::RestApi
    Properties:
      Name: "UrlShortenerAPI"
      Description: "API Gateway for URL Shortener"
      EndpointConfiguration:
        Types:
          - REGIONAL
  # API Gateway Resource for /urls
  UrlsResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      ParentId: !GetAtt ApiGateway.RootResourceId
      PathPart: "urls"
      RestApiId: !Ref ApiGateway

  # POST Method for /urls (Generate Short URL)
  PostUrlMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref ApiGateway
      ResourceId: !Ref UrlsResource
      HttpMethod: "POST"
      AuthorizationType: "NONE"
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: "POST"
        Uri: !Sub
          - "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${TinyurlLambdaFunction.Arn}/invocations"
          - lambdaArn: !GetAtt TinyurlLambdaFunction.Arn
        IntegrationResponses:
          - StatusCode: 200
      MethodResponses:
        - StatusCode: 200
  # DELETE Method for /urls (Delete Short URL)
  DeleteUrlMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref ApiGateway
      ResourceId: !Ref UrlsResource
      HttpMethod: "DELETE"
      AuthorizationType: "NONE"
      Integration:
        Type: AWS
        IntegrationHttpMethod: "POST"
        Uri: !Sub
          - "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${TinyurlLambdaFunction.Arn}/invocations"
          - lambdaArn: !GetAtt TinyurlLambdaFunction.Arn
        IntegrationResponses:
          - StatusCode: "200"
          - StatusCode: "404"
      MethodResponses:
        - StatusCode: "200"
        - StatusCode: "404"

  OptionsUrlMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref ApiGateway
      ResourceId: !Ref UrlsResource
      HttpMethod: "OPTIONS"
      AuthorizationType: "NONE"
      Integration:
        Type: MOCK
        IntegrationResponses:
          - StatusCode: 200
            ResponseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type'"
              method.response.header.Access-Control-Allow-Methods: "'OPTIONS,GET,POST,DELETE'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
        RequestTemplates:
          application/json: "{\"statusCode\":200}"
      MethodResponses:
        - StatusCode: 200
          ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: true
            method.response.header.Access-Control-Allow-Methods: true
            method.response.header.Access-Control-Allow-Origin: true
  # API Gateway Resource for /{hash}
  HashResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      ParentId: !GetAtt ApiGateway.RootResourceId
      PathPart: "{hash}"
      RestApiId: !Ref ApiGateway

  # GET Method for /{hash} (Redirect to Original URL)
  GetHashMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref ApiGateway
      ResourceId: !Ref HashResource
      HttpMethod: "GET"
      AuthorizationType: "NONE"
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: "POST"
        Uri: !Sub
          - "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${TinyurlLambdaFunction.Arn}/invocations"
          - lambdaArn: !GetAtt TinyurlLambdaFunction.Arn
        IntegrationResponses:
          - StatusCode: 302
          - StatusCode: 404
      MethodResponses:
        - StatusCode: 302
        - StatusCode: 404

  OptionsHashMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref ApiGateway
      ResourceId: !Ref HashResource
      HttpMethod: "OPTIONS"
      AuthorizationType: "NONE"
      Integration:
        Type: MOCK
        IntegrationResponses:
          - StatusCode: "200"
            ResponseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type'"
              method.response.header.Access-Control-Allow-Methods: "'OPTIONS,GET,POST,DELETE'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
        RequestTemplates:
          application/json: "{\"statusCode\":200}"
      MethodResponses:
        - StatusCode: "200"
          ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: true
            method.response.header.Access-Control-Allow-Methods: true
            method.response.header.Access-Control-Allow-Origin: true
  # Permission for API Gateway to Invoke Lambda
  LambdaPermissionForApiGateway:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref TinyurlLambdaFunction
      Action: "lambda:InvokeFunction"
      Principal: "apigateway.amazonaws.com"
      SourceArn: !Sub "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${ApiGateway}/*"
  ApiGatewayDeployment:
    Type: AWS::ApiGateway::Deployment
    DependsOn:
      - PostUrlMethod
      - DeleteUrlMethod
      - GetHashMethod
      - OptionsHashMethod
      - OptionsUrlMethod
    Properties:
      RestApiId: !Ref ApiGateway
      StageName: "prod"
Outputs:
  ApiGatewayUrl:
    Description: "URL for the API Gateway"
    Value: !Sub "https://${ApiGateway}.execute-api.${AWS::Region}.amazonaws.com/prod/"
  LambdaFunctionArn:
    Description: "ARN of the Tinyurl Lambda Function"
    Value: !GetAtt TinyurlLambdaFunction.Arn